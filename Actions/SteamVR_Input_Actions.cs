//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Pose p_gameplay_Pose;
        
        private static SteamVR_Action_Skeleton p_gameplay_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_gameplay_SkeletonRightHand;
        
        private static SteamVR_Action_Boolean p_gameplay_HeadsetOnHead;
        
        private static SteamVR_Action_Boolean p_gameplay_SnapTurnLeft;
        
        private static SteamVR_Action_Boolean p_gameplay_SnapTurnRight;
        
        private static SteamVR_Action_Vector2 p_gameplay_Move;
        
        private static SteamVR_Action_Boolean p_gameplay_Fire;
        
        private static SteamVR_Action_Boolean p_gameplay_Jump;
        
        private static SteamVR_Action_Boolean p_gameplay_Interact;
        
        private static SteamVR_Action_Boolean p_gameplay_Reload;
        
        private static SteamVR_Action_Boolean p_gameplay_SwitchWeapons;
        
        private static SteamVR_Action_Boolean p_gameplay_PrimarySkill;
        
        private static SteamVR_Action_Boolean p_gameplay_SecondarySkill;
        
        private static SteamVR_Action_Boolean p_gameplay_Dash;
        
        private static SteamVR_Action_Boolean p_gameplay_WeaponSkill;
        
        private static SteamVR_Action_Boolean p_gameplay_InterruptCharging;
        
        private static SteamVR_Action_Boolean p_gameplay_DualWielding;
        
        private static SteamVR_Action_Boolean p_gameplay_SwitchFireMode;
        
        private static SteamVR_Action_Boolean p_gameplay_TeamInformation;
        
        private static SteamVR_Action_Boolean p_gameplay_Ping;
        
        private static SteamVR_Action_Vector2 p_gameplay_Rotate;
        
        private static SteamVR_Action_Vibration p_gameplay_Haptic;
        
        private static SteamVR_Action_Boolean p_uI_InteractUI;
        
        private static SteamVR_Action_Boolean p_uI_Return;
        
        public static SteamVR_Action_Pose gameplay_Pose
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton gameplay_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SkeletonLeftHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton gameplay_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SkeletonRightHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_gameplay_HeadsetOnHead.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_SnapTurnLeft
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SnapTurnLeft.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_SnapTurnRight
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SnapTurnRight.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 gameplay_Move
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Move.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Fire
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Fire.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Jump
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Jump.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Interact
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Interact.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Reload
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Reload.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_SwitchWeapons
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SwitchWeapons.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_PrimarySkill
        {
            get
            {
                return SteamVR_Actions.p_gameplay_PrimarySkill.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_SecondarySkill
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SecondarySkill.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Dash
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Dash.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_WeaponSkill
        {
            get
            {
                return SteamVR_Actions.p_gameplay_WeaponSkill.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_InterruptCharging
        {
            get
            {
                return SteamVR_Actions.p_gameplay_InterruptCharging.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_DualWielding
        {
            get
            {
                return SteamVR_Actions.p_gameplay_DualWielding.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_SwitchFireMode
        {
            get
            {
                return SteamVR_Actions.p_gameplay_SwitchFireMode.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_TeamInformation
        {
            get
            {
                return SteamVR_Actions.p_gameplay_TeamInformation.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean gameplay_Ping
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Ping.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 gameplay_Rotate
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Rotate.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Vibration gameplay_Haptic
        {
            get
            {
                return SteamVR_Actions.p_gameplay_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Boolean uI_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_uI_InteractUI.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean uI_Return
        {
            get
            {
                return SteamVR_Actions.p_uI_Return.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.gameplay_Pose,
                    SteamVR_Actions.gameplay_SkeletonLeftHand,
                    SteamVR_Actions.gameplay_SkeletonRightHand,
                    SteamVR_Actions.gameplay_HeadsetOnHead,
                    SteamVR_Actions.gameplay_SnapTurnLeft,
                    SteamVR_Actions.gameplay_SnapTurnRight,
                    SteamVR_Actions.gameplay_Move,
                    SteamVR_Actions.gameplay_Fire,
                    SteamVR_Actions.gameplay_Jump,
                    SteamVR_Actions.gameplay_Interact,
                    SteamVR_Actions.gameplay_Reload,
                    SteamVR_Actions.gameplay_SwitchWeapons,
                    SteamVR_Actions.gameplay_PrimarySkill,
                    SteamVR_Actions.gameplay_SecondarySkill,
                    SteamVR_Actions.gameplay_Dash,
                    SteamVR_Actions.gameplay_WeaponSkill,
                    SteamVR_Actions.gameplay_InterruptCharging,
                    SteamVR_Actions.gameplay_DualWielding,
                    SteamVR_Actions.gameplay_SwitchFireMode,
                    SteamVR_Actions.gameplay_TeamInformation,
                    SteamVR_Actions.gameplay_Ping,
                    SteamVR_Actions.gameplay_Rotate,
                    SteamVR_Actions.gameplay_Haptic,
                    SteamVR_Actions.uI_InteractUI,
                    SteamVR_Actions.uI_Return};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.gameplay_Pose,
                    SteamVR_Actions.gameplay_SkeletonLeftHand,
                    SteamVR_Actions.gameplay_SkeletonRightHand,
                    SteamVR_Actions.gameplay_HeadsetOnHead,
                    SteamVR_Actions.gameplay_SnapTurnLeft,
                    SteamVR_Actions.gameplay_SnapTurnRight,
                    SteamVR_Actions.gameplay_Move,
                    SteamVR_Actions.gameplay_Fire,
                    SteamVR_Actions.gameplay_Jump,
                    SteamVR_Actions.gameplay_Interact,
                    SteamVR_Actions.gameplay_Reload,
                    SteamVR_Actions.gameplay_SwitchWeapons,
                    SteamVR_Actions.gameplay_PrimarySkill,
                    SteamVR_Actions.gameplay_SecondarySkill,
                    SteamVR_Actions.gameplay_Dash,
                    SteamVR_Actions.gameplay_WeaponSkill,
                    SteamVR_Actions.gameplay_InterruptCharging,
                    SteamVR_Actions.gameplay_DualWielding,
                    SteamVR_Actions.gameplay_SwitchFireMode,
                    SteamVR_Actions.gameplay_TeamInformation,
                    SteamVR_Actions.gameplay_Ping,
                    SteamVR_Actions.gameplay_Rotate,
                    SteamVR_Actions.uI_InteractUI,
                    SteamVR_Actions.uI_Return};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.gameplay_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.gameplay_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.gameplay_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.gameplay_HeadsetOnHead,
                    SteamVR_Actions.gameplay_SnapTurnLeft,
                    SteamVR_Actions.gameplay_SnapTurnRight,
                    SteamVR_Actions.gameplay_Fire,
                    SteamVR_Actions.gameplay_Jump,
                    SteamVR_Actions.gameplay_Interact,
                    SteamVR_Actions.gameplay_Reload,
                    SteamVR_Actions.gameplay_SwitchWeapons,
                    SteamVR_Actions.gameplay_PrimarySkill,
                    SteamVR_Actions.gameplay_SecondarySkill,
                    SteamVR_Actions.gameplay_Dash,
                    SteamVR_Actions.gameplay_WeaponSkill,
                    SteamVR_Actions.gameplay_InterruptCharging,
                    SteamVR_Actions.gameplay_DualWielding,
                    SteamVR_Actions.gameplay_SwitchFireMode,
                    SteamVR_Actions.gameplay_TeamInformation,
                    SteamVR_Actions.gameplay_Ping,
                    SteamVR_Actions.uI_InteractUI,
                    SteamVR_Actions.uI_Return};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[0];
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[] {
                    SteamVR_Actions.gameplay_Move,
                    SteamVR_Actions.gameplay_Rotate};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[] {
                    SteamVR_Actions.gameplay_SkeletonLeftHand,
                    SteamVR_Actions.gameplay_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.gameplay_HeadsetOnHead,
                    SteamVR_Actions.gameplay_SnapTurnLeft,
                    SteamVR_Actions.gameplay_SnapTurnRight,
                    SteamVR_Actions.gameplay_Move,
                    SteamVR_Actions.gameplay_Fire,
                    SteamVR_Actions.gameplay_Jump,
                    SteamVR_Actions.gameplay_Interact,
                    SteamVR_Actions.gameplay_Reload,
                    SteamVR_Actions.gameplay_SwitchWeapons,
                    SteamVR_Actions.gameplay_PrimarySkill,
                    SteamVR_Actions.gameplay_SecondarySkill,
                    SteamVR_Actions.gameplay_Dash,
                    SteamVR_Actions.gameplay_WeaponSkill,
                    SteamVR_Actions.gameplay_InterruptCharging,
                    SteamVR_Actions.gameplay_DualWielding,
                    SteamVR_Actions.gameplay_SwitchFireMode,
                    SteamVR_Actions.gameplay_TeamInformation,
                    SteamVR_Actions.gameplay_Ping,
                    SteamVR_Actions.gameplay_Rotate,
                    SteamVR_Actions.uI_InteractUI,
                    SteamVR_Actions.uI_Return};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_gameplay_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/Gameplay/in/Pose")));
            SteamVR_Actions.p_gameplay_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/Gameplay/in/SkeletonLeftHand")));
            SteamVR_Actions.p_gameplay_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/Gameplay/in/SkeletonRightHand")));
            SteamVR_Actions.p_gameplay_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/HeadsetOnHead")));
            SteamVR_Actions.p_gameplay_SnapTurnLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/SnapTurnLeft")));
            SteamVR_Actions.p_gameplay_SnapTurnRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/SnapTurnRight")));
            SteamVR_Actions.p_gameplay_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/Gameplay/in/Move")));
            SteamVR_Actions.p_gameplay_Fire = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Fire")));
            SteamVR_Actions.p_gameplay_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Jump")));
            SteamVR_Actions.p_gameplay_Interact = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Interact")));
            SteamVR_Actions.p_gameplay_Reload = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Reload")));
            SteamVR_Actions.p_gameplay_SwitchWeapons = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/SwitchWeapons")));
            SteamVR_Actions.p_gameplay_PrimarySkill = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/PrimarySkill")));
            SteamVR_Actions.p_gameplay_SecondarySkill = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/SecondarySkill")));
            SteamVR_Actions.p_gameplay_Dash = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Dash")));
            SteamVR_Actions.p_gameplay_WeaponSkill = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/WeaponSkill")));
            SteamVR_Actions.p_gameplay_InterruptCharging = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/InterruptCharging")));
            SteamVR_Actions.p_gameplay_DualWielding = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/DualWielding")));
            SteamVR_Actions.p_gameplay_SwitchFireMode = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/SwitchFireMode")));
            SteamVR_Actions.p_gameplay_TeamInformation = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/TeamInformation")));
            SteamVR_Actions.p_gameplay_Ping = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Gameplay/in/Ping")));
            SteamVR_Actions.p_gameplay_Rotate = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/Gameplay/in/Rotate")));
            SteamVR_Actions.p_gameplay_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/Gameplay/out/Haptic")));
            SteamVR_Actions.p_uI_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/UI/in/InteractUI")));
            SteamVR_Actions.p_uI_Return = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/UI/in/Return")));
        }
    }
}
